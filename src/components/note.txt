import {GetServerSideProps} from "next";
import React, {useEffect} from "react";
import Head from "next/head";
import dynamic from 'next/dynamic';
import styles from "../../styles/v.module.scss";
import VerseComponent from '../../src/components/VerseComponent';
import Loader from '../../src/components/Loader';
import {User, Surah, Verse} from '../../utils';
import edit from '../../src/components/edit';
import maps from '../../src/data/maps';
import useV from '../../src/components/useV';
import Navbar from '../../src/components/Navbar';
import {returnKey} from '../../src/components/useV';
import ReactAudioPlayer from 'react-audio-player';
import { gql } from "@apollo/client";
import client from "../../apollo-client";
import {client as client2, ssrCache} from '../../urql-client'
import { useQuery } from "urql";
import { useSnapshot} from "valtio"
import { state } from "../../src/components/useV";
import { Provider } from "urql";

const Popup = dynamic(() => import ('../../src/components/popup'));

export const returnQuery = (s : number, v : number, user : User) => {
    return gql `
    query Query {
        cs: surah(s: ${
        s - 1
    }){
            id
            titleAr
            title
            count
        }
        ps: surah(s: ${
        s - 1 !== 0 ? s - 2 : s - 1
    }){
            id
            count
        }
        verse(s: ${
        s - 1
    }, v: ${
        v - 1
    }) {
            id
            ${
        user.translations.map((t) => `${t}\n`)
    }
            ${
        user.tafseers.map((t) => `${
            returnKey(t)
        }\n`)
    }
            words {
            ${
        user.rasm.split("-")[0]
    }
            ${
        user.wbwtranslation
    }
            transliteration
            }
            meta {
                tse
                ayah
                surah
            }
        }
    }
`;
};

const V = (props : {
    data: {
        cs: Surah,
        ps: Surah,
        verse: Verse
    },
    s: number,
    v: number,
    maps: any,
    urqlState: any,
    user: User
}) => {
    const snap = useSnapshot(state)

    const [result] = useQuery({
        query: returnQuery(props.s+1, props.v+1, props.user)
      });
      const { data, error} = result;

    useEffect(()=>{
    if(error)console.log(error)
    if(data!==undefined){
        state.loc=[props.s, props.v]
        state.user=[props.user]
        state.verse=data.verse
        state.ps=data.ps
        state.cs=data.cs
        state.tafseerMap=props.maps.tafseers;
        state.translationMap=props.maps.translationLanguages;
        state.audioMap=props.maps.audio;
        state.loaded=true;
    }
    }, [data])

    useEffect(()=>console.log(snap.loaded), [snap])

    if(snap.loaded){
        return <Provider value={client2}><SubV/></Provider>
    }else{
        return <></>
    }
};

const SubV = () =>{
    const snap = useSnapshot(state)
    const {
        setRasm,
        setAudio,
        setTafseers,
        showPopup,
        setShowPopup,
        setTranslations,
        setWbwtranslation,
        returnCondition,
        audio,
        setPlaying,
        setAutoplay,
    } = useV();

    return (<div className={
        styles.d1
    }>
        <Head>
            <title> {
                `[${
                    snap.loc[0] + 1
                }:${
                    snap.loc[1] + 1
                }] ${
                    snap.cs.title.split(" (")[1].substring(0, snap.cs.title.split(" (")[1].length - 1)
                } (${
                    snap.cs.title.split(" (")[0]
                })`
            }</title>
            <meta property="og:title"
                content={
                    `[${
                        snap.loc[0] + 1
                    }:${
                        snap.loc[1] + 1
                    }] ${
                        snap.cs.title.split(" (")[1].substring(0, snap.cs.title.split(" (")[1].length - 1)
                    } (${
                        snap.cs.title.split(" (")[0]
                    })`
            }></meta>
            <meta name="keywords"
                content={
                    `${
                        snap.cs.title
                    }, ${
                        snap.cs.titleAr
                    }, ${
                        snap.verse.words.map((w : any) => `${
                            w ?. transliteration
                        }, `)
                    }${
                        snap.loc[0] + 1
                    }:${
                        snap.loc[1] + 1
                    }`
            }></meta>
            <meta name="description"
                content={
                    snap.verse[Object.keys(snap.verse).filter(key => key !== '__typename' && key !== 'id' && key !== 'words' && key !== 'meta')[0]] as string
            }></meta>
            <meta name="og:description"
                content={
                    snap.verse[Object.keys(snap.verse).filter(key => key !== '__typename' && key !== 'id' && key !== 'words' && key !== 'meta')[0]] as string
            }></meta>
        </Head>
        {
        returnCondition() ? <>
            <Navbar cs={snap.cs}
                setShowPopup={
                    (v : boolean) => setShowPopup(v)
                }/>
            <div className={
                styles.d9
            }><VerseComponent user={snap.user}
                    loc={snap.loc}
                    verse={snap.verse}
                    translationMap={snap.translationMap}
                    tafseerMap={snap.tafseerMap}/></div>
            {
            showPopup && <Popup setTranslations={
                    (v : any) => setTranslations(v)
                }
                v={true}
                loc={snap.loc}
                tafseerMap={snap.tafseerMap}
                audioMap={snap.audioMap}
                translationMap={snap.translationMap}
                setTafseers={
                    (v : any) => setTafseers(v)
                }
                setWbwtranslation={
                    (v : any) => setWbwtranslation(v)
                }
                user={snap.user}
                setRasm={
                    (v : any) => setRasm(v)
                }
                setAudio={
                    (v : any) => setAudio(v)
                }
                setShowPopup={
                    (v : any) => setShowPopup(v)
                }/>
        }
            {
            (<div className={
                styles.d40
            }>
                <div className={
                    styles.d34
                }>
                    <ReactAudioPlayer src={audio}
                        autoPlay={
                            snap.user.autoplay
                        }
                        controls
                        onEnded={
                            () => {
                                if (!snap.user.autoplay) 
                                    setPlaying(false)

                                

                                if (snap.user.autoplay) {
                                    if (!(snap.loc[0] === 113 && snap.loc[1] === 6)) {
                                        state.loc=(snap.loc[1] + 1 === snap.cs.count ? [
                                            snap.loc[0] + 1,
                                            0
                                        ] : [
                                            snap.loc[0], snap.loc[1] + 1
                                        ]);
                                    }
                                }
                            }
                        }/>
                    <div id={
                        styles.d100
                    }>
                        <div className={
                                snap.user.autoplay ? styles.d41 : styles.d39
                            }
                            onClick={
                                () => setAutoplay(!snap.user.autoplay)
                        }>
                            <h1>AUTO</h1>
                        </div>
                        <div className={
                                styles.d35
                            }
                            onClick={
                                () => {
                                    if (!(snap.loc[0] === 0 && snap.loc[1] === 0)) {
                                        state.loc=(snap.loc[1] === 0 ? [
                                            snap.loc[0] - 1,
                                            snap.ps.count - 1
                                        ] : [
                                            snap.loc[0], snap.loc[1] - 1
                                        ]);
                                    }
                                }
                        }>
                            <h1>ˆ</h1>
                        </div>
                        <h2> {
                            snap.loc[1] + 1
                        }</h2>
                        <div className={
                                styles.d36
                            }
                            onClick={
                                () => {
                                    if (!(snap.loc[0] === 113 && snap.loc[1] === 6)) {
                                        state.loc=(snap.loc[1] + 1 === snap.cs.count ? [
                                            snap.loc[0] + 1,
                                            0
                                        ] : [
                                            snap.loc[0], snap.loc[1] + 1
                                        ]);
                                    }
                                }
                        }>
                            <h1>ˇ</h1>
                        </div>
                    </div>
                </div>
            </div>)
        } </> : <div style={
            {
                position: 'fixed',
                top: '50vh'
            }
        }><Loader/></div>
    } </div>)
}

 export const getServerSideProps: GetServerSideProps = async function ({params, req, query}) {
    let user: User;
    user = edit(query, req, false);
    const Query = returnQuery(Number(params ?. s), Number(params ?. v), user);
/*     const { data } = await client.query({
        query: Query,
      }); */
    await client2.query(Query).toPromise();
    return {
        props: {
            s: Number(params ?. s) - 1,
            v: Number(params ?. v) - 1,
/*             data: {
                ... data,
                maps
            }, */
            user,
            maps,
            urqlState: ssrCache.extractData()
        }
    }; 
}; 
 
export default V

//////////////////////////////////////////////////

import { useEffect } from "react";
import { useLazyQuery } from "@apollo/client";
import Cookies from "js-cookie";
import { useRouter } from "next/router";
import { useState } from "react";
import maps from "../data/maps";
import {
  User,
  Surah,
  Verse,
  Audio,
  Tafseer,
  TranslationLanguage,
  Word,
} from "../../utils";
import { useSnapshot, proxy} from "valtio";
import { useQuery, gql } from 'urql'

export const state = proxy({
  loaded: false,
  cs: null,
  ps: null,
  loc:null,
  user: null,
  verse: null,
  translationMap: null,
  tafseerMap: null,
  audioMap: null
})

export const returnKey = (key: string): string =>
  key === "namoonaur" ? "namoonaur{\ntitle\nrange\nlink\n}" : key;

const useV = () => {
  const snap = useSnapshot(state)
  const router = useRouter();

  const [showPopup, setShowPopup] = useState(false);

  const setTranslations = (v: any) =>
    state.user=({
      ...snap.user,
      translations: v,
    });
  const setTafseers = (v: any) =>
    state.user=({
      ...snap.user,
      tafseers: v,
    });
  const setWbwtranslation = (v: any) =>
    state.user=({
      ...snap.user,
      wbwtranslation: v,
    });
  const setAudio = (v: any) =>
    state.user=({
      ...snap.user,
      audio: v,
    });
  const setRasm = (v: any) =>
    state.user=({
      ...snap.user,
      rasm: v,
    });
  const setAutoplay = (v: any) =>
    state.user=({
      ...snap.user,
      autoplay: v,
    });

    const [audio, setAudio2] = useState(
      `${maps.audio.find((e: any) => e.key === snap.user.audio)?.url}${(snap.loc[0] + 1)
        .toString()
        .padStart(3, "0")}${(snap.loc[1] + 1).toString().padStart(3, "0")}.mp3`
    );

  const [playing, setPlaying] = useState(false);

  const returnCondition = () =>
  snap.loc[0] + 1 === snap.verse.meta.surah && snap.loc[1] + 1 === snap.verse.meta.ayah;

  useEffect(() => {
    Cookies.set("user", JSON.stringify(snap.user), {
      expires: 60 * 60 * 24 * 1000,
    });
  }, []);

  useEffect(() => {
    if (snap.verse && snap.cs && snap.ps) {
      Cookies.set("user", JSON.stringify(snap.user), { expires: 365 });
    }
  }, [snap.user]);

  const WBWQuery = (key: string) => gql`
     query Query ($s: Int!, $v: Int!){
       verse(s: $s, v: $v){
         id
         words{
           ${key}
         }
       }
     }
    `;

  const [WBWData, getWBW] = useLazyQuery(WBWQuery(snap.user.wbwtranslation), {
    variables: {
      s: snap.loc[0],
      v: snap.loc[1],
    },
  });

  useEffect(() => {
    if (snap.verse) {
      if (!Object.keys(snap.verse.words[0] as Word).includes(snap.user.wbwtranslation)) {
        getWBW;
      }
    }
  }, [snap.user.wbwtranslation]);

  useEffect(() => {

    if (WBWData && WBWData.verse && snap.verse) {
      state.verse=({
        ...snap.verse,
        words: snap.verse.words.map((w: any, i: number) => {
          let nw = {
            ...w,
          };
          nw[snap.user.wbwtranslation] =
            WBWData.data.verse.words[i][snap.user.wbwtranslation];
          return nw;
        }),
      });
    }
  }, [WBWData]);

  useEffect(() => {
    setPlaying(false);
    setAudio2(
      `${maps.audio.find((e: any) => e.key === snap.user.audio)?.url}${(snap.loc[0] + 1)
        .toString()
        .padStart(3, "0")}${(snap.loc[1] + 1).toString().padStart(3, "0")}.mp3`
    );
  }, [snap.user.audio]);

  const [getRasm, rasmData] = useLazyQuery(WBWQuery(snap.user.rasm), {
    variables: {
      s: snap.loc[0],
      v: snap.loc[1],
    },
  });

  useEffect(() => {
    if (snap.verse) {
      if (!Object.keys(snap.verse.words[0] as Word).includes(snap.user.rasm)) {
        getRasm();
      }
    }
  }, [snap.user.rasm]);

  useEffect(() => {
    if (snap.verse) {
      if (rasmData.error)
        console.log(JSON.stringify(rasmData.error), snap.user.rasm);
      if (
        rasmData.data &&
        rasmData.data.verse &&
        snap.verse &&
        snap.verse.meta.ayah === snap.loc[1] + 1
      ) {
        state.verse=({
          ...snap.verse,
          words: snap.verse.words.map((w: any, i: number) => {
            let nw = {
              ...w,
            };
            nw[snap.user.rasm] = rasmData.data.verse.words[i][snap.user.rasm];
            return nw;
          }),
        });
      }
    }
  }, [rasmData]);

  const LineQuery = (key: string) => gql`
     query Query ($s: Int!, $v: Int!){
       verse(s: $s, v: $v){
         id
         ${returnKey(key)}
       }
     }
    `;

  const [getLine, lineData] = useLazyQuery(
    LineQuery(
      [...snap.user.tafseers, ...snap.user.translations].find(
        (key) =>
          !Object.keys(
            snap.verse
              ? snap.verse
              : {
                  s: "s",
                }
          ).includes(key)
      ) as string
    ),
    {
      variables: {
        s: +(router.query.s as string) - 1,
        v: +(router.query.v as string) - 1,
      },
    }
  );

  useEffect(() => {
    if (snap.verse) {
      if (
        [...snap.user.translations, ...snap.user.tafseers].some(
          (key) => !Object.keys(snap.verse).includes(key)
        )
      ) {
        getLine();
      }
    }
  }, [snap.user.translations, snap.user.tafseers]);

  useEffect(() => {
    if (lineData.error) console.log(JSON.stringify(lineData.error));

    if (lineData.data && lineData.data.verse) {
      const key = [...snap.user.translations, ...snap.user.tafseers].find(
        (key) => !Object.keys(snap.verse).includes(key)
      ) as string;
      let newVerse = JSON.parse(JSON.stringify(snap.verse));
      snap.verse[key] = lineData.data.verse[key];
      state.verse=(newVerse);
    }
  }, [lineData]);

  const VerseQuery = (keys: string[], r: string, w: string) => gql`
    query Query($s: Int!, $v: Int!, $s2: Int!){
      cs: surah(s: $s){
        id
        titleAr
        title
        count
      }
      ps: surah(s: $s2){
        id
        count
      }
      verse(s: $s, v: $v) {
       id
       ${keys.map((key) => returnKey(key)).join("\n")}
       words {
         ${w}
         ${r}
         transliteration
       }
       meta{
         tse
         ayah
         surah
       }
      }
    }
   `;

  const [getVerse, verseData] = useLazyQuery(
    VerseQuery(
      [...snap.user.translations, ...snap.user.tafseers],
      snap.user.rasm,
      snap.user.wbwtranslation
    ),
    {
      variables: {
        s: snap.loc[0],
        v: snap.loc[1],
        s2: snap.loc[0] !== 0 ? snap.loc[0] - 1 : 0,
      },
    }
  );

  useEffect(() => {
    if (verseData.error) console.log(JSON.stringify(verseData.error));

    if (verseData.data && verseData.called && verseData.data.verse) {
      state.verse=(verseData.data.verse);
      state.cs=(verseData.data.cs);
      state.ps=(verseData.data.ps);
    }
  }, [verseData]);

  useEffect(() => {
    if (snap.verse) {
      router.push(`/${snap.loc[0] + 1}/${snap.loc[1] + 1}`, undefined, { shallow: true });
      getVerse();
    }
    setAudio2(
      `${maps.audio.find((e: any) => e.key === snap.user.audio)?.url}${(snap.loc[0] + 1)
        .toString()
        .padStart(3, "0")}${(snap.loc[1] + 1).toString().padStart(3, "0")}.mp3`
    );
  }, [snap.loc]);

  const [initialState, setInitialState] = useState(null)
  
/*
  useEffect(()=>{
   console.log(initialState)
  }, [initialState])

  useEffect(() => {
     const fetch = async () => {
      let user: User;
      user = edit(router.query, Cookies.getJSON('user'), true);
      const Query = returnQuery(Number(router.query.s), Number(router.query.v), user);
      const res = await request(`${
          process.env.NEXT_PUBLIC_API_URL
      }/api/graphql`, Query);
      const data = res
      setInitialState(data)
      console.log(data)
    } 
    fetch()
  }, [])
 */

  return {
    setRasm,
    setAudio,
    setTafseers,
    showPopup,
    setShowPopup,
    setTranslations,
    setWbwtranslation,
    returnCondition,
    playing,
    audio,
    setPlaying,
    setAutoplay,
    initialState
  };
};
export default useV;
